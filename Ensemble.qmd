---
title: "Ensemble"
format: 
  html:
    theme: cosmo
    smooth-scroll: true
    toc: true
    toc-location: right
    # self-contained: true
# author: 
#     - name: J.I. Seo
#       affiliations:
#       - Gyeongguk National University
#     - name: J.W. Lee
#       # affiliations:
#       # - University of Missouri
      
number-sections: true
highlight-style: pygments
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
options(width=200)
```

## Amtrak

예제 데이터로 사용하는 `"Amtrak.csv"`은 1991년 1월부터 2004년 3월까지 미국 철도 회사인 암트랙에서 제공한 월간 승객 수(단위 : 1,000명)가 기록되어져 있다. 


### 데이터 불러오기

```{r, eval = F}
pacman::p_load("forecast",
               "forecastHybrid",                   # For Ensemble 
               "dplyr")

Amtrak.data <- read.csv(".../Amtrak.csv")          # 데이터 불러오기

Amtrak.data %>%
  as_tibble
```

```{r, echo = F}
pacman::p_load("forecast",
               "forecastHybrid",
               "dplyr")

Amtrak.data <- read.csv("./DATA/Amtrak.csv")             # 데이터 불러오기

Amtrak.data %>%
  as_tibble
```


### 데이터 전처리

```{r}
# Convert to ts for Target
ridership.ts <- ts(Amtrak.data$Ridership, 
                   start = c(1991, 2),            # 시계열의 시작 연도 / c(1991, 2) : 1991년 2월 -> 첫 번째 시계열은 제거했기 때문
                   frequency = 12)                # 주기 / 월별 시계열로 1년에 12번 관측


# 시계열 그림
plot(ridership.ts, 
     xlab = "Time", ylab = "Ridership (in 000s)",
     ylim = c(1300, 2300))
```

`Caution!` CSV 파일로 불러온 데이터를 살펴보면 승객 수를 포함하는 변수 `Ridership`가 수치형임을 알 수 있다. 시계열 데이터 분석을 위해 함수 `ts()`를 이용하여 해당 변수를 시계열 객체로 변환해야 한다.  
`Result!` 시계열 그림을 살펴보면 `Amtrak` 데이터는 U자 형태의 추세를 발견할 수 있으며, 여름(7월과 8월) 동안에 승객이 급증하는 뚜렷한 계절변동도 볼 수 있다.


### 데이터 분할

`Caution!` 시계열 데이터 분석 시 모형의 과적합을 피하고 미래 데이터에 대한 예측력을 계산하기 위해 `Training Dataset`과 `Test Dataset`으로 분할해야 한다. 시계열 데이터의 경우, 시간에 의존하기 때문에 시간 순서를 고려하여 데이터를 분할해야 한다. 즉, 앞 시점의 데이터를 `Training Dataset`로 사용하여 모형을 구축하고, 뒷 시점의 데이터를 `Test Dataset`로 사용하여 구축된 모형의 성능을 평가한다. 여기서는 데이터 분할을 위해 함수 `window()`를 사용한다.

```{r}
# Partition for Target
train.ts <- window(ridership.ts, 
                   start = c(1991, 2),            # 분할하고자 하는 시계열의 시작 연도 / c(1991, 2) : 1991년 2월 -> 첫 번째 시계열은 제거했기 때문
                   end = c(2001, 3))              # 분할하고자 하는 시계열의 마지막 연도 / c(2001, 3) : 2001년 3월

test.ts <- window(ridership.ts,
                   start = c(2001, 4))            # 분할하고자 하는 시계열의 시작 연도 / c(2001, 4) : 2001년 4월

nTrain   <- length(train.ts)                      # Training Dataset의 데이터 포인트 개수

nTest   <- length(test.ts)                        # Test Dataset의 데이터 포인트 개수

train.ts %>%
  as_tibble

test.ts %>%
  as_tibble

nTrain
nTest
```


## Ensemble

> 여기에서는 `forecastHybrid` 패키지를 활용하여 다양한 예측 모형을 결합한 앙상블(Ensemble) 예측을 수행하는 방법을 다룬다. 시계열 모형은 각각의 특성에 따라 예측력이 다르므로, 여러 모형을 결합하여 예측 정확도를 향상시킬 수 있다. 특히 `forecastHybrid`는 ARIMA, ETS, NNETAR, STLM 등 여러 모형을 자동으로 결합해주는 기능을 제공한다.

```{r}
set.seed(100)
fit <- hybridModel(train.ts, 
                   models = "afnst", 
                   weights = "cv", 
                   parallel = TRUE,
                   num.cores = 8) 
```

`Code!` 

1. 인자 `models`에 입력할 수 있는 모형은 다음과 같다:

| 코드    | 모형명    | 설명                                                 |
|:----- |:------ |:-------------------------------------------------- |
| **a** | ARIMA  | Box-Jenkins ARIMA 모형 (자동 모수 선택 포함)                 |
| **e** | ETS    | 지수 평활법 (Error, Trend, Seasonal을 자동 선택)             |
| **n** | NNETAR | 비선형 신경망 기반 자기회귀 모형 (Neural Network Autoregression) |
| **s** | STLM   | Seasonal Decomposition + AR 모형 (계절 분해 후 AR모형 적용)   |
| **t** | TBATS  | 복잡한 다중 계절성과 트렌드/변동성 처리 가능                          |
| **b** | BATS   | TBATS의 일반화 형태로, Box-Cox 변환 + ARMA 오차 포함 시계열 모형     |
| **f** | Theta  | Theta method (간단하지만 M3 대회에서 강력한 성능을 보인 모형)         |

</br>

2. 인자 `weights`는 각 개별 모형의 예측 결과를 결합할 때의 가중치 방식을 결정하는 중요한 요소이다. 이 인자를 어떻게 설정하느냐에 따라 앙상블 모형의 최종 예측 결과가 달라지므로, 이해하고 적절히 사용하는 것이 매우 중요하다.
  - 역할: 앙상블 예측은 단순 평균이 아니라, 각 모형의 예측 결과에 서로 다른 가중치를 부여하여 합산하는 방식이다. 
      - 인자 `weights`는 각 모형에 할당되는 가중치의 계산 방식을 결정한다. 
      - 잘 설계된 가중치는 성능이 우수한 모형의 기여도를 높이고, 부정확한 모형의 영향력을 줄여준다.

**`weights`에 입력할 수 있는 옵션**

| 옵션           | 설명                                                       | 사용 예시                                  |
|:------------ |:-------------------------------------------------------- |:-------------------------------------- |
| `"equal"`    | 모든 모형에 동일한 가중치를 부여함. 가장 단순한 방식.                      | 기본값                                    |
| `"insample"` | 학습 데이터(in-sample)의 예측 오차에 따라 가중치를 부여함.                   |                                        |
| `"cv"`       | 시계열 교차검증(cross-validation)을 통해 예측 성능 기반으로 가중치 계산 | 추천                                   |
| `numeric` 벡터 | 사용자가 직접 지정한 가중치 벡터 (각 모형 수에 맞춰야 함)                       | `weights = c(0.4, 0.2, 0.1, 0.2, 0.1)` |


```{r}
# ARIMA에 대한 결과 확인
fit$auto.arima
summary(fit$auto.arima)           # Fitting for auto.arima function
```


## 예측

```{r}
pred   <- forecast(fit,
                   h = nTest)    # Test Dataset의 데이터 포인트 개수만큼 예측값 계산 

# 예측값
pred
```

```{r}
# 예측 정확도
forecast::accuracy(pred, test.ts) 
```

