---
title: "Regression-based Forecasting"
format: 
  html:
    theme: cosmo
    smooth-scroll: true
    toc: true
    toc-location: right
    # self-contained: true
# author: 
#     - name: J.I. Seo
#       affiliations:
#       - Gyeongguk National University
#     - name: J.W. Lee
#       # affiliations:
#       # - University of Missouri
      
number-sections: true
highlight-style: pygments
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
options(width=200)
```

> 회귀모형에 기반한 예측 방법의 순서도는 다음과 같다.


<center>
![](./image/regression.png){width=70%}
</center>


</br>


## Amtrak

예제 데이터로 사용하는 `"Amtrak.csv"`은 1991년 1월부터 2004년 3월까지 미국 철도 회사인 암트랙에서 제공한 월간 승객 수(단위 : 1,000명)가 기록되어져 있다. 


### 데이터 불러오기

```{r, eval = F}
pacman::p_load("forecast",
               "dplyr")

Amtrak.data <- read.csv(".../Amtrak.csv")          # 데이터 불러오기

Amtrak.data %>%
  as_tibble
```

```{r, echo = F}
pacman::p_load("forecast",
               "dplyr")

Amtrak.data <- read.csv("./DATA/Amtrak.csv")             # 데이터 불러오기

Amtrak.data %>%
  as_tibble
```

### 데이터 전처리

`Caution!` CSV 파일로 불러온 데이터를 살펴보면 승객 수를 포함하는 변수 `Ridership`가 수치형임을 알 수 있다. 시계열 데이터 분석을 위해 함수 `ts()`를 이용하여 해당 변수를 시계열 객체로 변환해야 한다.

```{r}
# ts로 변환
ridership.ts <- ts(Amtrak.data$Ridership, 
                   start = c(1991, 1),            # 시계열의 시작 연도 / c(1991, 1) : 1991년 1월
                   frequency = 12)                # 주기 / 월별 시계열로 1년에 12번 관측
```


```{r}
# 시계열 그림
plot(ridership.ts, 
     xlab = "Time", ylab = "Ridership (in 000s)",
     ylim = c(1300, 2300))
```

`Result!` 시계열 그림을 살펴보면 `Amtrak` 데이터는 U자 형태의 추세를 발견할 수 있으며, 여름(7월과 8월) 동안에 승객이 급증하는 뚜렷한 계절변동도 볼 수 있다.


### 데이터 분할

`Caution!` 시계열 데이터 분석 시 모형의 과적합을 피하고 미래 데이터에 대한 예측력을 계산하기 위해 `Training Dataset`과 `Test Dataset`으로 분할해야 한다. 시계열 데이터의 경우, 시간에 의존하기 때문에 시간 순서를 고려하여 데이터를 분할해야 한다. 즉, 앞 시점의 데이터를 `Training Dataset`로 사용하여 모형을 구축하고, 뒷 시점의 데이터를 `Test Dataset`로 사용하여 구축된 모형의 성능을 평가한다. 여기서는 데이터 분할을 위해 함수 `window()`를 사용한다.

```{r}
# Partition 
train.ts <- window(ridership.ts, 
                   start = c(1991, 1),            # 분할하고자 하는 시계열의 시작 연도 / c(1991, 1) : 1991년 1월
                   end = c(2001, 3))              # 분할하고자 하는 시계열의 마지막 연도 / c(2001, 3) : 2001년 3월
test.ts <- window(ridership.ts,
                   start = c(2001, 4))            # 분할하고자 하는 시계열의 시작 연도 / c(2001, 4) : 2001년 4월
nTest   <- length(test.ts)                        # Test Dataset의 데이터 포인트 개수
```


```{r}
train.ts 
test.ts
nTest
```


## Model with Trend

예제 데이터 `Amtrak`은 전반적인 추세가 선형인 것 같지 않지만 선형 추세가 어떻게 구축되는지 설명하기 위해서 먼저 가장 간단한 선형 추세를 고려해본다.

</br>

### 선형 추세

- 가장 간단한 선형추세모형은 $Y_{t}=\beta_{0}+\beta_{1}t+\epsilon_t$이다.
  - $Y_{t}$ : 시점 $t$에서의 관측값
  - $t$ : 시간인덱스로써 $1, 2, \ldots, n$
  - $\beta_{0}$ : 수준(Level)
  - $\beta_{1}$ : 추세(Trend)에 대한 회귀계수
  - $\epsilon_t$ : 잡음(Noise)

</br>

`Caution!` Package `"forecast"`에서 제공하는 함수 `tslm()`를 이용하여 쉽게 시계열에 회귀모형을 적용할 수 있다. 선형추세를 가지는 모형은 함수 `tslm()`에 `Target ~ trend`를 해주면 된다.

```{r}
# 선형 추세를 반영한 회귀모형
train.lm  <- tslm(train.ts ~ trend)

summary(train.lm)                                 # 모형 구축 결과
```

`Result!` 모형 구축 결과에 따르면, $p$값이 0.3896으로 유의수준 0.05에서 $p$값이 0.05보다 크기 때문에 추정된 회귀식이 시계열에 적절하다는 증거가 부족하다.

`Caution!` 구축된 모형을 이용하여 예측을 수행하기 위해 Package `"forecast"`에서 제공하는 함수 `forecast()`를 이용하면 된다. 옵션 `h`에는 미래 몇 시점까지 예측할 것인지를 입력한다.

```{r}
# 선형추세모형을 이용한 예측
train.lm.pred <- forecast(train.lm, 
                          h = nTest,             # Test Dataset의 데이터 포인트 개수만큼 예측값 계산 
                          level = 0)             # 예측 구간은 계산 X

train.lm.pred
```

```{r}
par(mfrow = c(2, 1))
# 시계열 그림
plot(train.lm.pred, 
     ylim = c(1300, 2600), xlim = c(1991, 2006.25), # 축 범위
     ylab = "Ridership", xlab = "Time",             # 축 이름
     bty = "l",                                     # 선으로 표시
     xaxt = "n",                                    # X축 눈금 제거
     main = "",                                     # 제목 제거
     flty = 2)                                      # 선 종류 / 2 : 점선

# For X축 눈금 표시
axis(1, at = seq(1991, 2006, 1),                    
     labels = format(seq(1991, 2006, 1)))

# 구축된 모형을 이용하여 계산된 Training Dataset 데이터 포인트의 예측값 
lines(train.lm.pred$fitted, 
      lwd = 2,                                      # 선 굵기
      col = "blue")                                 # 선 색깔
# Test Dataset 데이터 포인트  
lines(test.ts)       


# 잔차에 대한 시계열 그림
plot(train.lm$residuals,                            # 잔차
     ylim = c(-420, 500), xlim = c(1991, 2006.25),  # 축 범위
     ylab = "Residual", xlab = "Time",              # 축 이름
     bty = "l",                                     # 선으로 표시
     xaxt = "n",                                    # X축 눈금 제거
     main = "")                                     # 제목 제거

# For X축 눈금 표시
axis(1, at = seq(1991, 2006, 1),                    
     labels = format(seq(1991, 2006, 1)))

# Test Dataset 데이터 포인트에 대한 잔차 예측값
lines(test.ts - train.lm.pred$mean)     
```

`Result!` 첫 번째 그래프는 구축된 선형추세모형으로부터 계산된 `Training Dataset`의 데이터 포인트에 대한 값과 예측값을 파란색 선으로 나타내고 있으며, 검은색 선은 실제값을 의미한다. 두 번째 그래프는 잔차에 대한 그래프이다. 이 두 그래프를 보면 추정값과 예측값이 실제값과 얼마나 차이가 나는지 볼 수 있으며, 잔차 그래프를 보면 잔차에 여전히 추세와 계절성이 남아있다는 것을 알 수 있다.


### 지수 추세

- 지수 추세는 시간에 따라서 시계열이 지수적으로 증가/감소하며 비선형 추세의 형태 중 하나이다.
- 모형식은  $\log{Y_{t}}=\beta_{0}+\beta_{1}t+\epsilon_ t$로 $Y_{t}=ce^{\beta_{1}t+\epsilon}$의 양변에 $\log$를 취하여 비선형을 선형으로 변환하여 분석한다.

</br>

`Caution!` 지수 추세를 반영하기 위해서는 함수 `tslm()`에서 옵션 `lambda = 0`을 입력하면 된다. 옵션 `lambda`는 Box-Cox 변환을 적용하는데 사용되며, `lambda = 0`이면 $\log{Y_{t}}$를 이용한다. 예측의 경우, `lambda = 0`을 입력해도 자동으로 원래 Scale로 변환된 결과를 출력한다.

```{r}
# 지수 추세를 반영한 회귀모형
train.lm.expo.trend      <- tslm(train.ts ~ trend, 
                                 lambda = 0)

summary(train.lm.expo.trend)                                 # 모형 구축 결과
```

```{r}
# 지수추세모형을 이용한 예측
train.lm.expo.trend.pred <- forecast(train.lm.expo.trend, 
                                     h = nTest,             # Test Dataset의 데이터 포인트 개수만큼 예측값 계산 
                                     level = 0)             # 예측 구간은 계산 X

train.lm.expo.trend.pred
```

`Result!` 예측값은 원래 Scale로 변환된 결과를 출력한다.


```{r}
par(mfrow = c(1, 1))
# 시계열 그림
plot(train.lm.expo.trend.pred, 
     ylim = c(1300, 2600), xlim = c(1991, 2006.25), # 축 범위
     ylab = "Ridership", xlab = "Time",             # 축 이름
     bty = "l",                                     # 선으로 표시
     xaxt = "n",                                    # X축 눈금 제거
     main = "",                                     # 제목 제거
     flty = 2)                                      # 선 종류 / 2 : 점선

# For X축 눈금 표시
axis(1, at = seq(1991, 2006, 1),                    
     labels = format(seq(1991, 2006, 1)))

# 구축된 모형을 이용하여 계산된 Training Dataset 데이터 포인트의 예측값 
lines(train.lm.expo.trend.pred$fitted, 
      lwd = 2,                                      # 선 굵기
      col = "blue")                                 # 선 색깔
# Test Dataset 데이터 포인트  
lines(test.ts)       
```


### 다항 추세

- 다항 추세는 비선형 추세의 또 다른 형태이다.
- 예제 데이터 `Amtrak`은 U자 형태의 추세를 가지므로 2차 함수 형태를 고려하였으며 모형식은 $Y_{t}=\beta_{0}+\beta_{1}t+\beta_{2}t^2+\epsilon_t$이다.

</br>

`Caution!` 다항 추세를 반영하기 위해 함수 `I()`를 이용한다.

```{r}
# 다항 추세를 반영한 회귀모형
train.lm.poly.trend      <- tslm(train.ts ~ trend +  I(trend^2))

summary(train.lm.poly.trend)                                # 모형 구축 결과
```


```{r}
# 다항추세모형을 이용한 예측
train.lm.poly.trend.pred <- forecast(train.lm.poly.trend, 
                                     h = nTest,             # Test Dataset의 데이터 포인트 개수만큼 예측값 계산 
                                     level = 0)             # 예측 구간은 계산 X

train.lm.poly.trend.pred
```

```{r}
par(mfrow = c(2, 1))
# 시계열 그림
plot(train.lm.poly.trend.pred, 
     ylim = c(1300, 2600), xlim = c(1991, 2006.25), # 축 범위
     ylab = "Ridership", xlab = "Time",             # 축 이름
     bty = "l",                                     # 선으로 표시
     xaxt = "n",                                    # X축 눈금 제거
     main = "",                                     # 제목 제거
     flty = 2)                                      # 선 종류 / 2 : 점선

# For X축 눈금 표시
axis(1, at = seq(1991, 2006, 1),                    
     labels = format(seq(1991, 2006, 1)))

# 구축된 모형을 이용하여 계산된 Training Dataset 데이터 포인트의 예측값 
lines(train.lm.poly.trend.pred$fitted, 
      lwd = 2,                                      # 선 굵기
      col = "blue")                                 # 선 색깔
# Test Dataset 데이터 포인트  
lines(test.ts)       


# 잔차에 대한 시계열 그림
plot(train.lm.poly.trend$residuals,                 # 잔차
     ylim = c(-420, 500), xlim = c(1991, 2006.25),  # 축 범위
     ylab = "Residual", xlab = "Time",              # 축 이름
     bty = "l",                                     # 선으로 표시
     xaxt = "n",                                    # X축 눈금 제거
     main = "")                                     # 제목 제거

# For X축 눈금 표시
axis(1, at = seq(1991, 2006, 1),                    
     labels = format(seq(1991, 2006, 1)))

# Test Dataset 데이터 포인트에 대한 잔차 예측값
lines(test.ts - train.lm.poly.trend.pred$mean)     
```

`Result!` 첫 번째 그래프를 보면 앞선 [선형 추세][선형 추세]와 [지수 추세][지수 추세]보다 추세를 잘 잡아내고 있다는 것을 알 수 있다. 게다가, 두 번째 그래프를 보면 잔차에 대해 추세는 없으며 오직 계절성만 존재한다는 것을 알 수 있다.


## Model with Seasonality

- 계절 패턴은 시계열 패턴이 동일한 형태로 반복되는 현상을 의미한다.
- 계절성만 가지는 모형은 함수 `tslm()`에 `Target ~ season`을 입력하면 된다.
    - 변수 `season`은 "0"과 "1" 값을 가지는 더미변수로 자동적으로 변환된다.
    - 예를 들어, 예제 데이터 `Amtrak`은 변수 `Season`에 12개의 계절을 가지며, 분석을 위해 11개의 더미변수가 생성된다.
    
<center>![](./image/season.png)</center>


### Additive 계절성

```{r}
train.lm.season      <- tslm(train.ts ~  season)     # 참조변수 = Season 1

summary(train.lm.season)                             # 모형 구축 결과
```

`Result!` `season8`의 회귀계수는 396.66으로 8월의 평균 승객 수는 1월의 평균 승객 수보다 396.66배 높다.

```{r}
# 계절변동을 반영한 회귀모형을 이용한 예측
train.lm.season.pred <- forecast(train.lm.season, 
                                 h = nTest,          # Test Dataset의 데이터 포인트 개수만큼 예측값 계산 
                                 level = 0)          # 예측 구간은 계산 X

train.lm.season.pred
```

```{r}
par(mfrow = c(2, 1))
# 시계열 그림
plot(train.lm.season.pred, 
     ylim = c(1300, 2600), xlim = c(1991, 2006.25), # 축 범위
     ylab = "Ridership", xlab = "Time",             # 축 이름
     bty = "l",                                     # 선으로 표시
     xaxt = "n",                                    # X축 눈금 제거
     main = "",                                     # 제목 제거
     flty = 2)                                      # 선 종류 / 2 : 점선

# For X축 눈금 표시
axis(1, at = seq(1991, 2006, 1),                    
     labels = format(seq(1991, 2006, 1)))

# 구축된 모형을 이용하여 계산된 Training Dataset 데이터 포인트의 예측값 
lines(train.lm.season.pred$fitted, 
      lwd = 2,                                      # 선 굵기
      col = "blue")                                 # 선 색깔
# Test Dataset 데이터 포인트  
lines(test.ts)       


# 잔차에 대한 시계열 그림
plot(train.lm.season$residuals,                     # 잔차
     ylim = c(-420, 500), xlim = c(1991, 2006.25),  # 축 범위
     ylab = "Residual", xlab = "Time",              # 축 이름
     bty = "l",                                     # 선으로 표시
     xaxt = "n",                                    # X축 눈금 제거
     main = "")                                     # 제목 제거

# For X축 눈금 표시
axis(1, at = seq(1991, 2006, 1),                    
     labels = format(seq(1991, 2006, 1)))

# Test Dataset 데이터 포인트에 대한 잔차 예측값
lines(test.ts - train.lm.season.pred$mean)  
```

`Result!` 두 번째 그래프를 보면 잔차에 대해 계절변동은 제거되었지만 추세는 여전히 U자 형태로 남아있음을 알 수 있다.


### Multiplicative 계절성

- 회귀모형을 통하여 특정 월이 기준 월에 비해 몇 \% 증가(혹은 감소)했는지와 같은 비율을 알아보기 위해서는 계절변동의 곱을 반영하는 모형을 이용해야 한다.
- 계절변동의 곱을 반영하는 회귀모형의 구축방법은 Target을 $\log{Y_t}$로 사용하는 점을 제외하고는 [Additive 계절성][Additive 계절성] 방법과 동일하다.
    - 이를 구현하기 위해 함수 `tslm()`에서 옵션 `lambda = 0`을 입력한다.

```{r}
train.expo.lm.season      <- tslm(train.ts ~  season, 
                                  lambda = 0)

summary(train.expo.lm.season)                       # 모형 구축 결과            
```


```{r}
# Multiplicative 계절변동을 반영한 회귀모형을 이용한 예측
train.expo.lm.season.pred <- forecast(train.expo.lm.season, 
                                      h = nTest,    # Test Dataset의 데이터 포인트 개수만큼 예측값 계산 
                                      level = 0)    # 예측 구간은 계산 X

train.expo.lm.season.pred
```


```{r}
par(mfrow = c(1, 1))
# 시계열 그림
plot(train.expo.lm.season.pred, 
     ylim = c(1300, 2600), xlim = c(1991, 2006.25), # 축 범위
     ylab = "Ridership", xlab = "Time",             # 축 이름
     bty = "l",                                     # 선으로 표시
     xaxt = "n",                                    # X축 눈금 제거
     main = "",                                     # 제목 제거
     flty = 2)                                      # 선 종류 / 2 : 점선

# For X축 눈금 표시
axis(1, at = seq(1991, 2006, 1),                    
     labels = format(seq(1991, 2006, 1)))

# 구축된 모형을 이용하여 계산된 Training Dataset 데이터 포인트의 예측값 
lines(train.expo.lm.season.pred$fitted, 
      lwd = 2,                                      # 선 굵기
      col = "blue")                                 # 선 색깔
# Test Dataset 데이터 포인트  
lines(test.ts)   
```

## Model with Trend and Seasonality

- 추세와 계절변동을 동시에 가지는 시계열 모형은 함수 `tslm()`에서 옵션 `Target ~ trend + season`을 입력하면 된다.
- 예제 데이터 `Amtrak`은 U자 형태의 추세를 가지므로 이차 함수 추세와 계절변동을 동시에 반영하는 모형을 구축한다.

```{r}
# 이차 함수 추세와 계절변동을 동시에 반영하는 모형 구축
train.lm.trend.season      <- tslm(train.ts ~ trend + I(trend^2) + season)

summary(train.lm.trend.season)                      # 모형 구축 결과
```


```{r}
# 이차 함수 추세와 계절변동을 동시에 반영한 모형을 이용한 예측
train.lm.trend.season.pred <- forecast(train.lm.trend.season, 
                                       h = nTest,   # Test Dataset의 데이터 포인트 개수만큼 예측값 계산 
                                       level = 0)   # 예측 구간은 계산 X

train.lm.trend.season.pred
```

```{r}
par(mfrow = c(2, 1))
# 시계열 그림
plot(train.lm.trend.season.pred, 
     ylim = c(1300, 2600), xlim = c(1991, 2006.25), # 축 범위
     ylab = "Ridership", xlab = "Time",             # 축 이름
     bty = "l",                                     # 선으로 표시
     xaxt = "n",                                    # X축 눈금 제거
     main = "",                                     # 제목 제거
     flty = 2)                                      # 선 종류 / 2 : 점선

# For X축 눈금 표시
axis(1, at = seq(1991, 2006, 1),                    
     labels = format(seq(1991, 2006, 1)))

# 구축된 모형을 이용하여 계산된 Training Dataset 데이터 포인트의 예측값 
lines(train.lm.trend.season.pred$fitted, 
      lwd = 2,                                      # 선 굵기
      col = "blue")                                 # 선 색깔
# Test Dataset 데이터 포인트  
lines(test.ts)       


# 잔차에 대한 시계열 그림
plot(train.lm.trend.season$residuals,               # 잔차
     ylim = c(-420, 500), xlim = c(1991, 2006.25),  # 축 범위
     ylab = "Residual", xlab = "Time",              # 축 이름
     bty = "l",                                     # 선으로 표시
     xaxt = "n",                                    # X축 눈금 제거
     main = "")                                     # 제목 제거

# For X축 눈금 표시
axis(1, at = seq(1991, 2006, 1),                    
     labels = format(seq(1991, 2006, 1)))

# Test Dataset 데이터 포인트에 대한 잔차 예측값
lines(test.ts - train.lm.trend.season.pred$mean) 
```

`Result!` 첫 번째 그래프를 보면 모형 구축과 예측이 잘 된 것을 알 수 있으며, 두 번째 그래프를 통해 잔차의 추세와 계절성이 모두 제거된 것을 알 수 있다.


## Autocorrelation and ARIMA Model

### Autocorrelation

- 전통적인 회귀모형은 관측값 간에 서로 독립을 가정한다.
- 하지만 시계열 관측값들은 대부분 서로 상관관계(자기상관관계)를 가지고 있다.
    - 자기상관관계를 활용하면 보다 더 정확한 예측을 할 수 있다.

<center>![](./image/PositiveNegativeAutocorrelation.jpg)</center>

</br>

- 자기상관은 현재 시점($t$)과 미래의 하나 또는 그 이상의 시점($t+k$, $k$>0)에서 관측된 시계열들의 상관관계를 의미한다.
  - $k>1$에 대하여, 강한 자기상관은 전형적인 주기변동을 의미한다. 
      - 예를 들어, 월별로 구성된 시계열에서 시차 12일 때 강한 양의 자기상관은 12개월을 주기로 비슷한 패턴이 반복됨을 의미한다.
  - $k=1$에 대하여, 강한 양의 상관은 강한 선형추세를 의미한다.
  - $k=1$에 대하여, 강한 음의 상관은 강한 스윙을 의미한다.
- 자기 상관은 계절성 패턴을 파악하는 데 유용하며 함수 `Acf()` 함수를 자기상관계수 그래프를 출력할 수 있다.

```{r}
Acf(train.ts,
    lag.max = 12, 
    main = "")
```

`Result!` 예제 데이터 `Amtrak`의 자기상관계수 그래프를 보면 시차 6에서 강한 음의 자기상관을 보여준다. 즉, 6개월 단위로 높아지다가 낮아지는 것을 의미한다. (여름에는 높고 겨울에는 낮음을 의미)


#### 잔차의 자기상관

- 추가적으로 잔차의 자기상관을 살펴보는 것도 매우 유용하다. 
    - 잔차는 백색잡음과정(white noise)을 가정하기 때문에 독립이어야한다. 
    - 즉, 잔차의 자기상관계수 그래프는 막대가 모두 선 안에 있어야한다.
        - 예를 들어 계절성이 잘 모형화되었다면, 잔차는 주기에서 자기상관이 0이다. 즉, 막대가 선 안에 있다.
- 다음 그래프는 [이차 함수 추세와 계절변동을 반영한 회귀모형][Model with Trend and Seasonality]의 잔차의 자기상관계수 그래프이다.  

```{r}
Acf(train.lm.trend.season$residuals, 
    lag.max = 12,
    main = "")
```

`Result!` 계절변동이 있는 시계열을 잘 모형화했기 때문에 주기인 12에서 막대가 선 안에 있다. 이는 시차 12에서 자기상관계수는 통계적으로 유의하다는 증거가 부족함을 의미한다. 그러나 시차 1에서 강한 양의 자기상관을 보이며 전반적으로 자기상관계수는 지수적으로 감소하는 것을 알 수 있다.


### 잔차에 대한 2차 예측모형 구축

- 잔차에 예측모형을 구축함으로써 짧은 기간에 대한 예측을 향상시킬 수 있으며, 그 절차는 다음과 같다.
    1. 회귀모형을 이용하여 미래 $k$시점의 예측값($F_{t+k}$)을 생성한다.
    2. AR 모형 또는 다른 모형을 이용하여 미래 $k$시점의 잔차에 대한 예측값($E_{t+k}$)을 생성한다.
    3. 예측모형을 이용하여 구한 예측값과 잔차에 대한 예측값을 더하여 향상된 예측값($F_{t+k}+E_{t+k}$)을 얻는다.
- 예제 데이터 `Amtrak`은 잔차의 자기상관이 시차 1에서 강한 양의 자기상관을 보이며 지수적으로 감소하기에 잔차에 AR(1) 모형을 구축할 수 있다.
    - 잔차에 대한 AR(1) 모형식은 $E_{t}=\beta_{0}+\beta_{1}E_{t-1}+\epsilon_t$이다.
        - $E_{t}$ : 시점 $t$에서 잔차
    - 일반적으로 AR(1) 모형을 구축하기 위해서 시계열은 정상성을 만족해야 하지만, 잔차는 백색잡음과정을 가정하기 때문에 자기상관 외에 어떠한 추세나 주기적 행동을 포함하지 않아 정상성 확인이 따로 필요하지 않는다.

```{r}
# 1. 추세와 계절변동을 반영하는 회귀모형을 이용한 모형 구축
train.lm.trend.season <- tslm(train.ts ~ trend + I(trend^2) + season)    

summary(train.lm.trend.season)                      # 모형 구축 결과
```



```{r}
# 1-1. 회귀모형을 이용한 미래 k시점에 대한 예측값
train.lm.trend.season.pred <- forecast(train.lm.trend.season, 
                                       h = nTest,   # Test Dataset의 데이터 포인트 개수만큼 예측값 계산 
                                       level = 0)   # 예측 구간은 계산 X

train.lm.trend.season.pred
```

```{r}
# 2. 잔차에 AR(1) 모형 구축
train.res.arima      <- arima(train.lm.trend.season$residuals,
                              order = c(1,0,0))   

summary(train.res.arima)                            # 모형 구축 결과
```

`Result!`  잔차에 AR(1) 모형에 대한 추정된 회귀식은 ${E}_{t}=0.3728+0.5998(E_{t-1}-0.3728)+\epsilon_t$이다. 게다가, AR(1) 회귀 계수 0.5998와 시차가 1일 때 잔차의 자기상관 0.6041은 비슷하다.


```{r}
# 2-1. 미래 k시점에 대한 잔차의 예측값 
train.res.arima.pred <- forecast(train.res.arima, 
                                 h = nTest,         # Test Dataset의 데이터 포인트 개수만큼 예측값 계산 
                                 level = 0)         # 예측 구간은 계산 X

train.res.arima.pred
```

`Result!` 미래 1시점에서 잔차 예측값은 $0.3728+0.5998*(12.108-0.3728)=7.411$이다.

```{r}
par(mfrow = c(2,1))
# 잔차에 대한 시계열 그림
plot(train.lm.trend.season$residuals,               # 잔차
     ylim = c(-250, 250),  xlim = c(1991, 2006.25), # 축 범위
     ylab = "Residual", xlab = "Time",              # 축 이름
     bty = "l",                                     # 선으로 표시
     xaxt = "n",                                    # X축 눈금 제거
     main = "")                                     # 제목 제거

# For X축 눈금 표시
axis(1, at = seq(1991, 2006, 1),                    
     labels = format(seq(1991, 2006, 1)))
# Test Dataset 데이터 포인트에 대한 잔차 예측값
lines(train.res.arima.pred$fitted,
      lwd = 2,                                      # 선 굵기
      col = "blue")                                 # 선 색깔

# AR(1) 모형에 대한 잔차의 자기상관계수 그림
Acf(train.res.arima$residuals, lag.max = 12)
```

`Result!` 첫 번째 그래프를 보면 회귀모형에 대한 잔차와 AR(1) 모형에 의해 추정된 잔차는 서로 비슷한 것을 알 수 있다. 두 번째 그래프를 보면 AR(1) 모형에 의해 추정된 잔차의 자기상관계수는 막대가 모두 선 안에 있으므로 독립성을 만족한다는 것을 알 수 있다.



```{r}
# 3. 최종 예측 = 회귀모형에 의한 예측 + AR(1) 모형에 의한 예측
Improved_forecast <- data.frame(pred.y   = train.lm.trend.season.pred$mean,   # 회귀모형에 의한 예측값
                                pred.res = train.res.arima.pred$mean) %>%     # AR(1) 모형에 의한 잔차 예측값
  mutate(Imp.pred = pred.y + pred.res)                                        # 두 예측값을 더한 최종 예측값

Improved_forecast$Imp.pred
```

`Result!` 미래 1시점에 대해 향상된 예측값은 $2004.271+7.411=2011.682$로 기존의 예측값 2004.271보다 실제값 2023.792에 더 가깝다. 

```{r}
# 정확도
forecast::accuracy(Improved_forecast$Imp.pred, test.ts)      
```




```{r}
par(mfrow = c(1,1))
# 추세와 계절변동을 반영한 회귀모형에 대한 예측값
plot(train.lm.trend.season.pred, 
     ylim = c(1300, 2600), xlim = c(1991, 2006.25), # 축 범위
     ylab = "Ridership", xlab = "Time",             # 축 이름
     bty = "l",                                     # 선으로 표시
     xaxt = "n",                                    # X축 눈금 제거
     main = "")                                     # 제목 제거

# For X축 눈금 표시
axis(1, at = seq(1991, 2006, 1),                    
     labels = format(seq(1991, 2006, 1)))

# Test Dataset 데이터 포인트에 대한 향상된 예측값
lines(Improved_forecast$Imp.pred, 
      lwd = 1,                                      # 선 굵기
      col = "orange")                               # 선 색깔

# Test Dataset 데이터 포인트  
lines(test.ts)
```

