---
title: "STLM"
format: 
  html:
    theme: cosmo
    smooth-scroll: true
    toc: true
    toc-location: right
    # self-contained: true
# author: 
#     - name: J.I. Seo
#       affiliations:
#       - Gyeongguk National University
#     - name: J.W. Lee
#       # affiliations:
#       # - University of Missouri
      
number-sections: true
highlight-style: pygments
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
options(width=200)
```

## Amtrak

예제 데이터로 사용하는 `"Amtrak.csv"`은 1991년 1월부터 2004년 3월까지 미국 철도 회사인 암트랙에서 제공한 월간 승객 수(단위 : 1,000명)가 기록되어져 있다. 


### 데이터 불러오기

```{r, eval = F}
pacman::p_load("forecast",
               "dplyr")

Amtrak.data <- read.csv(".../Amtrak.csv")          # 데이터 불러오기

Amtrak.data %>%
  as_tibble
```

```{r, echo = F}
pacman::p_load("forecast",
               "dplyr")

Amtrak.data <- read.csv("./DATA/Amtrak.csv")             # 데이터 불러오기

Amtrak.data %>%
  as_tibble
```


### 데이터 전처리

```{r}
# 1. Create Predictor Variable
ridership.df <- Amtrak.data %>%
  dplyr::mutate(Lag1 = dplyr::lag(Ridership, 
                                  n = 1)) %>%      # 바로 이전 과거에 관측된 값을 예측 변수로 생성
  na.omit()                                        # 결측치 NA가 포함된 행 제거 -> 첫 번째 시계열은 과거 관측값이 없기 때문에 변수 Lag1에 NA 생성 
  
ridership.df %>%
    as_tibble

# 2. Convert to ts for Target
ridership.ts <- ts(ridership.df$Ridership, 
                   start = c(1991, 2),            # 시계열의 시작 연도 / c(1991, 2) : 1991년 2월 -> 첫 번째 시계열은 제거했기 때문
                   frequency = 12)                # 주기 / 월별 시계열로 1년에 12번 관측


# 시계열 그림
plot(ridership.ts, 
     xlab = "Time", ylab = "Ridership (in 000s)",
     ylim = c(1300, 2300))
```

`Caution!` CSV 파일로 불러온 데이터를 살펴보면 승객 수를 포함하는 변수 `Ridership`가 수치형임을 알 수 있다. 시계열 데이터 분석을 위해 함수 `ts()`를 이용하여 해당 변수를 시계열 객체로 변환해야 한다.  
`Result!` 시계열 그림을 살펴보면 `Amtrak` 데이터는 U자 형태의 추세를 발견할 수 있으며, 여름(7월과 8월) 동안에 승객이 급증하는 뚜렷한 계절변동도 볼 수 있다.

### 데이터 분할

`Caution!` 시계열 데이터 분석 시 모형의 과적합을 피하고 미래 데이터에 대한 예측력을 계산하기 위해 `Training Dataset`과 `Test Dataset`으로 분할해야 한다. 시계열 데이터의 경우, 시간에 의존하기 때문에 시간 순서를 고려하여 데이터를 분할해야 한다. 즉, 앞 시점의 데이터를 `Training Dataset`로 사용하여 모형을 구축하고, 뒷 시점의 데이터를 `Test Dataset`로 사용하여 구축된 모형의 성능을 평가한다. 여기서는 데이터 분할을 위해 함수 `window()`를 사용한다.

```{r}
# Partition for Target
train.ts <- window(ridership.ts, 
                   start = c(1991, 2),            # 분할하고자 하는 시계열의 시작 연도 / c(1991, 2) : 1991년 2월 -> 첫 번째 시계열은 제거했기 때문
                   end = c(2001, 3))              # 분할하고자 하는 시계열의 마지막 연도 / c(2001, 3) : 2001년 3월

test.ts <- window(ridership.ts,
                   start = c(2001, 4))            # 분할하고자 하는 시계열의 시작 연도 / c(2001, 4) : 2001년 4월

nTrain   <- length(train.ts)                      # Training Dataset의 데이터 포인트 개수

nTest   <- length(test.ts)                        # Test Dataset의 데이터 포인트 개수

train.ts %>%
  as_tibble

test.ts %>%
  as_tibble

nTrain
nTest
```

## Decomposition

- 시계열은 추세(Trend), 계절(Seasonal), 나머지(Remainder) 성분으로 분해할 수 있다.
$$
\begin{align*}
Y_t = T_t + S_t +R_t
\end{align*}
$$
    - $T_t$ : 추세 성분
    - $S_t$ : 계절 성분
    - $R_t$ : 나머지(오차) 성분
        - 비정상성인 추세와 계절성을 제거했으므로 정상 시계열 형태
- 분해는 시계열을 이해하는 데 도움이 되며, 시간에 따른 변화를 살펴볼 때 유용하다.
- 특히, `Seasonal and Trend decomposition using Loess (STL)` 분해는 다양한 상황에서 사용할 수 있는 강력한 시계열 분해 기법이다.
    - STL이 가지는 장점은 다음과 같다.
        1. 어떤 종류의 계절성도 다룰 수 있다.
        2. 계절성이 시간에 따라 변화해도 잘 분해할 수 있다.
        3. 추세의 매끄러운 정도를 사용자가 조절할 수 있다.
        4. 이상치가 추세와 계절 성분에 영향을 주지 않게 만들 수 있다.
        
</br>

`Caution!` 시계열에 STL 분해를 적용하기 위해서는 함수 `stl()`를 이용하면 되고, 자세한 옵션은 [여기](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/stl)를 참고한다. 만약, 시계열이 다중 계절성(계절 주기가 2개 이상인 경우)을 가진다면, 함수 `mstl()`을 이용한다.

```{r, eval = F}
stl(x, s.window, t.window, ...)
```
- `x` : 시계열
- `s.window` : 계절 성분의 값을 추정할 때 사용할 연이은 시계열 관측값의 개수
    - 해당 옵션을 통해 시간의 흐름에 따라 계절 성분이 얼마나 급격하게 변하는 지 조절할 수 있다.
    - 계절 패턴이 시간의 흐름에 따라 일정하면 `"periodic"`을 입력한다.
        - `"periodic"`을 입력하면 같은 계절의 추정된 성분값은 동일하다. 
        - 예를 들어, 주기가 12인 월별 시계열 데이터에 대해 2012년 1월과 2013년 1월의 추정된 계절 성분값이 동일하다.
    - 계절 패턴이 느리게 변하는 경우, 즉, 계절 패턴이 긴 주기로 변하는 경우 `큰 값`을 입력한다.
        - 예를 들어, 주식 데이터의 경우, 일반적으로 연간으로 반복되는 계절 패턴이 있을 수 있다.
        - 즉, 일일 시계열 데이터가 연 단위 계절성을 가진다면 `s.window`값을 크게 설정하여 보다 긴 시간 동안의 데이터를 고려하여야 한다.
    - 계절 패턴이 빠르게 변하는 경우, 즉, 계절 패턴이 짧은 주기로 변하는 경우 `작은 값`을 입력한다.
        - 예를 들어, 일별 기온 데이터의 경우, 계절 주기는 연 단위보다는 한 주 또는 한 달 단위로 더 빠르게 변화할 수 있다.
        - 이러한 데이터에 대해 `s.window`값을 작게 설정하여 최근의 변화와 세부적인 계절 패턴을 더 잘 반영할 수 있게 한다.
- `t.window` : 추세를 추정할 때 사용할 연이은 시계열 관측값의 개수
    - 값이 커질수록 추세를 평활하게(스무스하게) 추정한다.


```{r}
# 옵션 s.window에 "periodic" 입력
train.ts %>%
  stl( s.window = "periodic", robust = TRUE) %>%
  autoplot()
```


```{r}
# 옵션 s.window에 큰 값 입력
train.ts %>%
  stl( s.window = 20, robust = TRUE) %>%
  autoplot()
```


```{r}
# 옵션 s.window에 작은 값 입력
train.ts %>%
  stl( s.window = 2, robust = TRUE) %>%
  autoplot()
```

`Result!` `s.window`에 `"periodic"` 또는 `20`과 같이 큰 값을 입력하면 추정된 계절 성분의 값은 시간의 흐름에 따라 일정한 패턴을 가진다. 반면, `2`와 같이 작은 값을 입력하면 최근의 변화와 세부적인 계절 패턴을 포착함으로써 시간의 흐름에 따라 추정치의 변동이 일정하지 않다.


```{r}
# 옵션 t.window에 큰 값 입력
train.ts %>%
  stl( s.window = "periodic", t.window = 20, robust = TRUE) %>%
  autoplot()
```


```{r}
# 옵션 t.window에 작은 값 입력
train.ts %>%
  stl( s.window = "periodic", t.window = 5, robust = TRUE) %>%
  autoplot()
```

`Result!` `t.window`에 `20`과 같이 큰 값을 입력하면 추정된 추세 성분은 스무스하게 변화한다. 반면, `5`와 같이 작은 값을 입력하면 추세 성분이 더 민감하게 데이터의 최근 변동을 반영하게 만들어 빠르게 변화하는 추세를 더 잘 잡아낼 수 있다.  
`Caution!` `t.window`에 너무 작은 값을 입력하면 빠른 추세 변동을 감지할 수 있지만, 잡음에 민감해질 수 있다.


## STLM

- 분해는 시계열을 연구하거나 시간에 따른 변화를 살펴볼 때 유용하지만, 예측에도 사용할 수 있다.
- STL Model (STLM)은 STL 분해를 이용하여 시계열을 $Y_{t} = S_{t} + T_{t}+R_t$로 분해한 후 $S_{t}$와 $A_{t}=T_{t}+R_t$를 각각 예측하고, 두 예측값을 더한 것을 최종 예측값으로 사용한다. 
    - $S_{t}$ : 계절 성분(Seasonal Component)
        - $S_{t}$는 계절 성분이 변하지 않거나 엄청 느리고 변하는 상황을 가정하고 `Seasonal Naive Method`을 이용하여 예측한다.
    - $A_{t}$ : 추세 + 나머지 성분
        - $A_{t}$는 `시계열 모형`을 이용하여 예측한다.

<center>![](./image/STLM.png){width=70%}</center>


</br>

### Seasonal Naive Method

- Seasonal Naive Method은 계절성이 아주 뚜렷한 데이터를 다룰 때 유용한 방법이다. 
- 해당 방법은 각 예측값을 `같은 계절의 마지막 관측값`으로 계산한다.
    - $\hat{y}_{T+h|T}=y_{T+h-m(k+1)}$
      - $m$ : 계절성의 주기 (Seasonal Period)
      - $k$ : $(h-1)/m+1$의 정수 부분
- 아래 그림은 $m=5$일 때 예측값을 나타낸 예제이다.

<center>![](./image/STLM2.png){width=50%}</center>

</br>


### STLM without 예측 변수

- STLM은 package `"forecast"`에서 제공하는 함수 `stlm()`을 이용하여 수행할 수 있으며, 자세한 옵션은 [여기](https://www.rdocumentation.org/packages/forecast/versions/8.15/topics/forecast.stl)를 참고한다.

```{r, eval= FALSE}
stlm(y, s.window, method = c("ets", "arima"),  modelfunction, xreg )
```

- `y` : 시계열 
- `s.window` : STL 분해를 위한 옵션으로 계절 성분의 값을 추정할 때 사용할 연이은 시계열 관측값의 개수
- `method` : $A_{t}$ (추세 + 나머지 성분)을 분석하기 위해 적용할 시계열 모형
- `modelfunction` : `"ets"`, `"arima"` 외에 적용하고자 하는 시계열 모형에 대한 함수 형태
- `xreg` : `method = "arima"` 일 때, 함수 `auto.arima()`에 사용할 예측 변수


```{r}
STLM.fit <- train.ts %>%
  stlm(method = "arima")                            # 시계열을 분해하고 추세 + 나머지 성분에 ARIMA 모형 구축

STLM.fit
```

`Result!` 함수 `stlm()`은 다음과 같은 결과를 출력한다.

- `stl` : STL 분해의 결과
- `model` : $A_{t}$ (추세 + 나머지 성분)에 대한 모형 구축 결과
- `x` : 원 시계열 
- `m` : 계절 주기
- `fitted` : STLM 모형에 의한 원 시계열의 추정값
- `residuals` : 잔차


```{r}
# 추세 + 나머지 성분에 대한 모형 구축 결과
STLM.fit$model
```

`Result!` 함수 `stlm()`에 옵션 `method = "arima"`을 입력하면 함수 `auto.arima()`를 이용하여 자동적으로 최적의 ARIMA 모형을 선택한다. 예제 데이터 `Amtrak`의 $A_{t}$에는 다음과 같은 MA(1) 모형이 추정되었다.

$$
\begin{align*}
(1-B)A_t = \epsilon_t-0.4583\epsilon_{t-1}.
\end{align*}
$$


```{r}
# 예측 
pred.STLM <- forecast(STLM.fit, h = nTest)        # MA(1) 모형을 이용하여 A_t를 예측 + Seasonal naive method에 의한 Seasonal 예측

pred.STLM %>%
  as_tibble
```


```{r}
plot(pred.STLM)
```


```{r}
# 예측 정확도
forecast::accuracy(pred.STLM$mean, test.ts)   
```

### STLM with 예측 변수

```{r}
# 시계열을 분해하고 추세 + 나머지 성분에 예측 변수를 포함한 회귀모형 구축
STLM.fit2 <- train.ts %>%
  stlm(method = "arima",
       xreg = ridership.df$Lag1[1:nTrain])                      # In 1-2

STLM.fit2
```


```{r}
# 추세 + 나머지 성분에 대한 모형 구축 결과
STLM.fit2$model
```

`Result!` 모형 구축 결과에 의하면, 예제 데이터 `Amtrak`의 $A_{t}$에는 다음과 같은 모형이 추정되었다.

$$
\begin{align*}
A_t &= -0.0044X_{\text{lag, t}} + \epsilon_t,\\
(1-B)\epsilon_t & = e_t -0.4546e_{t-1}.
\end{align*}
$$


```{r}
# 예측 
pred.STLM2 <- forecast(STLM.fit2,                                # 회귀모형을 이용하여 A_t를 예측 + Seasonal naive method에 의한 Seasonal 예측
                       h = nTest,                                # Test Dataset의 데이터 포인트 개수만큼 예측값 계산 
                       newxreg = ridership.df$Lag1[-(1:nTrain)]) # Test Dataset에 대한 예측 변수
pred.STLM2 %>%
  as_tibble

plot(pred.STLM2)
```


```{r}
# 예측 정확도
forecast::accuracy(pred.STLM2$mean, test.ts)   
```
